
# Deploying a Static Website on AWS EC2 Using Terraform

## Introduction

In this tutorial, I'll walk you through deploying a static website on an AWS EC2 instance using Terraform. The website includes a simple HTML page styled with CSS and enhanced with JavaScript functionality. We'll also set up NGINX to serve the website. You can find the complete setup files in my [GitHub repository](https://github.com/username/static-website-deployment).

## Prerequisites

Before we begin, ensure you have the following:

1. **Terraform** installed on your local machine. You can follow this [installation guide](https://learn.hashicorp.com/tutorials/terraform/install-cli) if you haven't installed it yet.
2. **AWS CLI** installed and configured with appropriate permissions to create resources. You can follow this [installation guide](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html).
3. An AWS account with permissions to create VPCs, Subnets, Security Groups, EC2 Instances, and Key Pairs.

## Project Structure

Here's an overview of the project files:

- `provider.tf`: Configures the AWS provider.
- `network.tf`: Creates the VPC, Subnet, Internet Gateway, and Route Table.
- `security-group.tf`: Creates the Security Group for the EC2 instance.
- `keypair.tf`: Generates an SSH key pair and stores the private key locally.
- `instance.tf`: Creates the EC2 instance and deploys the static website.
- `variables.tf`: Defines the variables used in the Terraform configuration.
- `terraform.tfvars`: Contains the values for the variables defined in `variables.tf`.
- `nginx-setup.sh`: Bash script to install NGINX and set up the static website.
- `website/index.html`: The HTML file for the static website.
- `website/styles.css`: The CSS file for the static website.
- `website/script.js`: The JavaScript file for the static website.

## Deployment Steps

### Step 1: Clone the Repository

First, clone the repository to your local machine:

```bash
git clone https://github.com/username/static-website-deployment.git
cd static-website-deployment
```

### Step 2: Review and Modify Variables

Review the variable values in `terraform.tfvars` and modify them as necessary to suit your requirements.

### Step 3: Initialize Terraform

Initialize the Terraform working directory:

```bash
terraform init
```

### Step 4: Validate the Setup

Validate the configuration to ensure everything is set up correctly:

```bash
terraform validate
```

### Step 5: Plan the Deployment

Generate and review an execution plan to verify the resources that will be created:

```bash
terraform plan
```

### Step 6: Apply the Terraform Configuration

Apply the configuration to create the resources:

```bash
terraform apply --auto-approve
```

### Step 7: Access the Website

Once the deployment is complete, you can access the website using the public IP address of the created EC2 instance. The public IP address will be displayed as an output after applying the Terraform configuration. For example: `http://<public-ip>:80`

## Configuration Details

### Provider Configuration

The `provider.tf` file sets up the AWS provider with the specified region and profile.

```hcl
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region  = var.region
  profile = "default"
}
```

### Network Configuration

The `network.tf` file creates a VPC, Subnet, Internet Gateway, and Route Table.

```hcl
resource "aws_vpc" "static_website_vpc" {
  cidr_block = var.vpc_cidr_block
  tags = {
    Name = "${var.project_name}_vpc"
  }
}

resource "aws_subnet" "static_website_subnet" {
  vpc_id                  = aws_vpc.static_website_vpc.id
  cidr_block              = var.subnet_cidr_block
  availability_zone       = var.availability_zone
  map_public_ip_on_launch = true
  tags = {
    Name = "${var.project_name}_subnet"
  }
}

resource "aws_internet_gateway" "static_website_igw" {
  vpc_id = aws_vpc.static_website_vpc.id
  tags = {
    Name = "${var.project_name}_internet_gateway"
  }
}

resource "aws_route_table" "static_website_route_table" {
  vpc_id = aws_vpc.static_website_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.static_website_igw.id
  }
  tags = {
    Name = "${var.project_name}_route_table"
  }
}

resource "aws_route_table_association" "static_website_route_table_association" {
  subnet_id      = aws_subnet.static_website_subnet.id
  route_table_id = aws_route_table.static_website_route_table.id
}
```

### Security Group Configuration

The `security-group.tf` file creates a security group that allows SSH and HTTP traffic.

```hcl
resource "aws_security_group" "static_website_security_group" {
  name        = "static_website_security_group"
  description = "Allow traffic"
  vpc_id      = aws_vpc.static_website_vpc.id

  ingress {
    description = "STATIC_WEBSITE_SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "STATIC_WEBSITE_HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "All traffic"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.project_name}_security_group"
  }
}
```

### Key Pair Configuration

The `keypair.tf` file generates an SSH key pair and stores the private key locally in the `file` folder.

```hcl
resource "local_file" "private_key" {
  content  = tls_private_key.my_private_key.private_key_pem
  filename = "${path.module}/file/static-web-key.pem"
}

resource "aws_key_pair" "static_website_keypair" {
  key_name   = var.static_website_keypair_name
  public_key = tls_private_key.my_private_key.public_key_openssh
}

resource "tls_private_key" "my_private_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}
```

### EC2 Instance Configuration

The `instance.tf` file creates the EC2 instance and deploys the static website using a user data script.

```hcl
data "aws_ami" "ubuntu_static_website" {
  most_recent = true
  owners      = ["099720109477"]
  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}

resource "aws_instance" "static_website_instance" {
  ami             = data.aws_ami.ubuntu_static_website.id
  instance_type   = var.instance_type_static_website
  subnet_id       = aws_subnet.static_website_subnet.id
  key_name        = aws_key_pair.static_website_keypair.key_name
  security_groups = [aws_security_group.static_website_security_group.id]
  depends_on      = [aws_key_pair.static_website_keypair, aws_subnet.static_website_subnet, aws_security_group.static_website_security_group]

  user_data = filebase64("nginx-setup.sh")

  tags = {
    Name = "${var.project_name}_instance"
  }
}

output "static_website_instance_public_ip" {
  value = aws_instance.static_website_instance.public_ip
}
```

### Variables and Terraform Variables File

The variables are defined in `variables.tf` and their values are provided in `terraform.tfvars`.

```hcl
# variables.tf

variable "region" {}
variable "project_name" {}
variable "vpc_cidr_block" {}
variable "subnet_cidr_block" {}
variable "availability_zone" {}
variable "static_website_keypair_name" {}
variable "instance_type_static_website" {}

# terraform.tfvars

region = "eu-west-1"
project_name = "static_website"
vpc_cidr_block = "10.0.0.0/16"
subnet_cidr_block = "10.0.1.0/24"
availability_zone = "eu-west-1a"
static_website_keypair_name = "static-web-key"
instance_type_static_website = "t2.micro"
```

## Conclusion

By following this tutorial, you have successfully deployed a static website on an AWS EC2 instance using Terraform. You can access the website using the public IP address of the EC2 instance. For more details and to access the setup files, visit my [GitHub repository](https://github.com/username/static-website-deployment).

You can customize it to your taste.